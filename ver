#!/bin/bash
#############################################################################
## C O N F I G     V A R S                                                 ##
##-------------------------------------------------------------------------##
##Basedir: You need to change this to your needs
DIR="/home/mhyst/NAS/Download/transmission/completed/"
DIRS="/home/mhyst/bin/scripts/series/titles/"
##You must chage the path to your own db
SQLITE="sqlite /home/mhyst/bin/scripts/ver/verdb"
##Change this to your favourite player with the options you like
PLAYER="vlc -f --no-loop --play-and-exit"
#############################################################################

#Don't touch code from here unless you know what you are doing
#   | | |
#   v v v

#Current version
VERSION="0.1.8"

function help {
	echo "ver $VERSION - Copyleft (GPL v3) Julio Serrano 2016"
	echo "Series and films watching mate"
	echo
	echo "Modo de empleo: ver [opción] <título>"
	echo
	echo " Ejemplos:"
	echo
	echo "   Para reproducir archivos que contengan 'xyz'"
	echo "   \$> ver xyz"
	echo
	echo "   Para ver un episodio de Better call Saul"
	echo "   \$> ver better call saul"
	echo
	echo " Puede introducir un máximo de nueve palabras."
	echo " El script no tiene en cuenta mayúsculas y minúsculas."
	echo
	echo "Opciones"
	echo " -v"
	echo "      Para listar también medios ya vistos."
	echo
	echo " -n"
	echo "      Para listar todos los medios que no hayan sido reproducidos."
	echo
	echo " ^<título>"
	echo "      Ir directamente al episodio siguiente de la serie."
	echo
	echo " -r, --reset"
	echo "      Reiniciar serie"
	echo
	echo " -m, --mreset <título>"
	echo "      Esta opción puede repetirse para reiniciar varias series en el mismo comando."	
	echo
	echo " --reset-by n"
	echo "      Se debe sustituir 'n' por un número."
	echo "      Volver 'n' episodios atrás en la serie."	
	echo
	echo " -b, --back"
	echo "      Volver un episodio atrás."	
	echo
	echo " -f, --forth"
	echo "      Mover el puntero de la serie al siguiente episodio."
	echo
	echo " -a, --forth-all"
	echo "      Marcar todos los episodios de la serie como vistos."	
	echo
	echo " --forth-by n"
	echo "      Mover el puntero de la serie 'n' posiciones hacia adelante."	
	echo

}

function trim {
    echo $*
}

function makeFilename {
	local filename="$1"
	filename=`echo "$filename" | sed s/u000A//g`
	filename=$(basename "$filename")
	echo "$filename"
}

function getFile {
	local filename="$1"
	filename=$(makeFilename "$filename")

	id=`$SQLITE "select id from file where filename = \"$filename\""`
	echo $id
}

function insertFile {
	local filename="$1"
	filename=$(makeFilename "$filename")

	#filename=`echo "$filename" | sed s/u000A//g`
	#filename=$(basename "$filename")
	$SQLITE "insert into file  (filename) values (\"$filename\")"

	echo $(getFile "$filename")
}

function getVisto {
	id=$1

	visto=`$SQLITE "select veces from visto where id=$id"`
	echo $visto
}

function insertVisto {
	id=$1

	$SQLITE "insert into visto values ($id, 1)"
}

function addVisto {
	id=$1

	$SQLITE "update visto set veces=veces+1 where id=$id"
	echo "$(getVisto "$id")"
}

function isVisto {
	local filename="$1"
	#filename=$(makeFilename "$filename")

	local id=$(getFile "$filename")
	if [[ ${#id} == 0 ]]; then
		echo 0
	else
		echo $(getVisto "$id")
	fi	
}

function goForth {
	local filename="$1"

	local ID=$(getFile "$filename")
	#echo $ID

	if [[ ${#ID} == 0 ]]; then

		#It is not, let's insert it
		ID=$(insertFile "$filename")
		#echo $ID
		$(insertVisto "$ID")
		#echo "Has visto este archivo $VECES veces"

	else

		#The file is already in the db, so we update visto
		VECES=$(addVisto "$ID")

	fi		
}

function reset {
	local filename="$1"

	DATA=`$SQLITE "select id from file where filename like \"%$filename%\""`
	for id in $DATA; do
		#echo "Borrando Id: $id"
		$SQLITE "delete from visto where id=$id"
		$SQLITE "delete from file where id=$id"
	done
	echo "Reset completado a $filename"
}

function resetBackOne {
	local filename="$1"

	local id=`$SQLITE "select max(id) from file where filename like \"%$filename%\""`
	local idSize=${#id}

	if [[ $idSize == 0 ]]; then
		echo false
	else
		$SQLITE "delete from visto where id=$id"
		$SQLITE "delete from file where id=$id"
		echo true
	fi
}

function resetBy {
	local filename="$1"
	local by=$2

	for ((i=0; i<$by; i++)); do
		local res=$(resetBackOne "$filename" "$by")
		if ! $res; then
			echo "Reset interrumpido antes de finalizar"
			break
		fi
	done
	echo "Reset finalizado a $filename"
}

function isSeries {
	local name="$1"
	local line="$2"
	local res=false

	#Recorremos el directorio de las series mismo de clat
	for serie in `ls -1 $DIRS`; do
		#Si el nombre del archivo coincide con el de una serie
		if [[ ${name,,} == ${serie,,}* ]]; then
			echo true
			# echo ">>>Este archivo es de la serie $serie"
			# episode=`echo $name | grep -oE '[0-9]{1,2}x[0-9]{1,3}'`


			# res=$(isDownloaded "$serie" "$episode")
			# if $res; then
			# 	echo "    Ya lo tenemos"
			# else
			# 	# local dotname=`echo "$name" | tr " " .`
			# 	# res=$(isDownloaded "$dotname")
			# 	# if $res; then
			# 	# 	echo "    Ya lo tenemos"
			# 	# else
			# 		echo "    No lo tenemos"
			# 		#Llamamos a la funcion que descargará el archivo
			# 		check "$name" "$line" "$serie"
			# 	#fi
			# fi
			break
    	fi
	done 	
}

TEMP=`getopt -o abfhmnrv: --long "back,forth,forth-by:,forth-all,help,reset,mreset:,reset-by:" -- "$@"`

# Debug
#echo "$TEMP"
if [ $? != 0 ]; then help; exit 1; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

VER_NO_VISTOS=false
VER_VISTOS=false
forth_number=0
forth_all=false
reset=false
reset_by=false
back=0
reset_data=()

while true; do
  case "$1" in
  	-h | --help ) help; exit ;;
	-b | --back ) let back++ ;;
	-f | --forth ) let forth_number++ ;;
	--forth-by ) forth_number=$2; shift ;;
	-a | --forth-all ) forth_all=true ;;
	-n ) VER_NO_VISTOS=true ;;
    -v ) VER_VISTOS=true ;;
	-r | --reset ) reset=true ;;
	-m | --mreset ) reset_data+=("$2"); shift ;;
	--reset-by ) reset_by=true; bydata=$2; shift ;;
    * ) break ;;
  esac
  shift
done

PARM=""
for arg in $@; do
	if [[ $1 != "--" ]]; then
		PARM="$PARM$1 "
	fi
	shift
done

PARM=$(trim $PARM)

echo "ver $VERSION - Copyleft (GPL v3) Julio Serrano 2016"
echo "Helper to watch series video files and films"
echo

if $reset; then
	reset "$PARM"
fi

if $reset_by; then
	resetBy "$PARM" $bydata
fi

if [[ ${#reset_data} > 0 ]]; then
	echo "Número de peticiones de mreset: ${#reset_data}"
	for part in ${reset_data[@]}; do
		echo "$part"
		reset "$part"
		if [[ $PARM == "" ]]; then
			PARM="$part"
		fi
	done
fi

while [[ $back > 0 ]]; do
	res=$(resetBackOne "$PARM")
	
	let back--
done
unset res




#Play next episode
#This option is no compatible with -v or -nv
DIRECTO=false
if [[ $PARM == ^* ]]; then
	PARM=${PARM:1}
	DIRECTO=true
fi

#Go to base dir where files are located
cd $DIR

echo "Buscando: >$PARM<"
echo
if $VER_NO_VISTOS; then
	#Find all files
	find * -name '*.avi' -o -name '*.mp4' -o -name '*.mkv' -type f | sort > /tmp/films.txt
else
	#Find files that match with your args
	find * -name '*.avi' -o -name '*.mp4' -o -name '*.mkv' -type f | grep -i "$PARM" | sort > /tmp/films.txt
fi

FILE=$(</tmp/films.txt)
SIZE=${#FILE}

#If there were no results
if [[ $SIZE == 0 ]]; then
	echo "No hay coincidencias"
else
	#Read films.txt into array IN
	readarray IN < /tmp/films.txt
	#We no longer need films.txt
	rm /tmp/films.txt

	#If there was just a result
	#there's no need for menu
	if [[ ${#IN[*]} == 1 ]]; then

		FILM="$FILE"
		echo "He encontrado este archivo:"
		echo "$FILM"

	else

		QUEDA=false
		primero=true
		#As there were several results, we show a menu with all of them
		for index in ${!IN[*]}
		do
			ITERA=${IN[$index]}
			if $VER_VISTOS; then
				sign=" "
				if [[ $(isVisto "$ITERA") == 0 ]]; then	
					if $primero; then
						sign=">"
						primero=false
					else
						sign=" "
		    		fi
				fi
				printf " $sign$index:\t$(basename "$ITERA")\n"
		    	QUEDA=true
		    else
		    	if $VER_NO_VISTOS; then
		    		echo "Entra"
		    		seriefile=$(basename "$ITERA")
		    		seriefile=$(echo $seriefile | tr . " ")
		    		echo "Sale: $seriefile"
		    		res=$(isSeries "$seriefile")
		    		if $res; then
		    			echo "Lo pilla"
		    			continue
		    		fi
		    	fi

		    	if [[ $(isVisto "$ITERA") == 0 ]]; then
			    	if [[ $forth_number > 0 ]] || $forth_all; then
			    		goForth "$ITERA"
			    		let forth_number--
			    	else
		    			printf "  $index:\t$(basename "$ITERA")\n"	
				    	QUEDA=true
				    	if $DIRECTO; then
				    		echo "Reproducir directamente el siguiente"
				    		FILM="$ITERA"
				    		break
				    	fi
		    		fi
		    	fi
			    
		    fi
			#if [ $(isVisto "${IN[$index]}") ] || $VER_VISTOS; then
		    #	printf " $index: ${IN[$index]}"
		    #	QUEDA=true
		    #fi
		done

		if ! $QUEDA; then
			echo "Usted ya ha visto todos los archivos coincidentes"
			echo "Si a pesar de todo quiere volver a verlos, use \"ver -v $PARM\""
			exit
		fi
		

		if ! $DIRECTO; then

			echo
			echo "Introduzca el número del archivo que quiere ver:"
			read REPLY
			echo

			#We see if the user entered a number such as we need
			LIMITE=$(( ${#IN[*]} - 1 ))
			#LIMITE2=$(( LIMITE - 1 ))
			while [ "$REPLY" -lt 0 ] || [ "$REPLY" -gt  $LIMITE ]; do

				#We give advice to the user and exit
				echo "Tiene que introducir un número de entre los señalados:"
				read REPLY

			done

			CHOSEN=${IN[REPLY]}
			if [ ${#CHOSEN} == 0 ]; then
				echo "Debe elegir entre los que se le ofrecen"
				exit 1
			else
				echo "Ha elegido:"
				echo "  $CHOSEN"
				FILM="$CHOSEN"
			fi

		fi
	fi


	#Remove \n chars from the string to avoid vlc errors
	FILM=`echo $FILM | sed s/u000A//g`
	#echo "$FILM" | hexdump -c

	#Get just the filename without the path
	FILENAME=$(basename "$FILM")

	#Check if the file has been watched before
	#Look if the file is already in the db
	ID=$(getFile "$FILENAME")
	#echo $ID

	if [[ ${#ID} == 0 ]]; then

		echo "  Es la primera vez que va a ver este archivo"

	else
		
		VECES=$(addVisto "$ID")
		
		echo "  Ha visto este archivo $VECES veces"
	fi

	#About to start playing. Let's warn the user and pause
	echo "  La reproducción va a comenzar..."
	echo
	if ! $DIRECTO; then
		read -rsp $'  Pulsa ENTER para continuar o CTRL^C para abortar...\n'
	fi

	#Call vlc to play the selected file
	${PLAYER} "${FILM}" &
	echo
	echo "Reproducción en progreso..."

	#Make annotations in the db that this file has been watched
	#Look if the file is already in the db
	ID=$(getFile "$FILENAME")
	#echo $ID

	if [[ ${#ID} == 0 ]]; then

		#It is not, let's insert it
		ID=$(insertFile "$FILENAME")
		#echo $ID
		$(insertVisto "$ID")
		#echo "Has visto este archivo $VECES veces"

	else

		#The file is already in the db, so we update visto
		VECES=$(addVisto "$ID")

	fi	
fi
